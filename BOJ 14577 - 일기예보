#define _CRT_SECURE_NO_WARNINGS // BOJ 14577
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int SIZE = 1e4 + 5;

typedef struct t{
	ll x, y, z;
}t;

t make_t(ll x, ll y, ll z) {
	t ret;
	ret.x = x; ret.y = y; ret.z = z;
	return ret;
}

int n, m;
ll arr[SIZE], sn[SIZE];
ll tree[SIZE * 4];
map<ll, int> s;
ll f_1[SIZE];

ll init(int left, int right, int node) {
	if (left == right) return tree[node] = sn[left];

	int mid = (left + right) >> 1;
	return tree[node] = init(left, mid, node * 2) + init(mid + 1, right, node * 2 + 1);
}

void update(int left, int right, ll diff, int idx, int node) {
	if (right < idx || idx < left) return;
	if (left <= idx && idx <= right) tree[node] += diff;

	if (left == right) return;

	int mid = (left + right) >> 1;
	update(left, mid, diff, idx, node * 2);
	update(mid + 1, right, diff, idx, node * 2 + 1);
}

ll get_sum(int left, int right, int x, int y, int node) {
	if (right < x || y < left) return 0;
	if (x <= left && right <= y) return tree[node];

	int mid = (left + right) >> 1;
	return get_sum(left, mid, x, y, node * 2) + get_sum(mid + 1, right, x, y, node * 2 + 1);
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	freopen("input.txt", "r", stdin);

	cin >> n >> m;
	vector<ll> snow;
	ll temp[SIZE];
	for (int i = 1; i <= n; i++) {
		cin >> arr[i];
		temp[i] = arr[i];
		snow.push_back(arr[i]);
	}

	vector<t> query;
	for (int i = 0; i < m; i++) {
		ll x, y, z = 0; cin >> x >> y;

		if (x != 4) cin >> z;

		t qry = make_t(x, y, z);
		query.push_back(qry);

		if (x == 1) {
			arr[y] += z;
			snow.push_back(arr[y]);
		}
		else if(x == 2){
			arr[y] -= z;
			snow.push_back(arr[y]);
		}
	}
	sort(snow.begin(), snow.end());
	snow.erase(unique(snow.begin(), snow.end()), snow.end());

	for (int i = 0; i < snow.size(); i++) {
		s[snow[i]] = i;
		f_1[i] = snow[i];
	}

	memset(sn, 0, sizeof(sn));
	memset(tree, 0, sizeof(tree));
	for (int i = 1; i <= n; i++) sn[s[temp[i]]]++;
	init(0, snow.size() - 1, 1);

	for (auto i : query) {
		int x = i.x, y = i.y, z = i.z;
		
		if (x == 1) {
			update(0, snow.size() - 1, -1, s[temp[y]], 1);
			sn[s[temp[y]]]--;
			temp[y] += z;
			sn[s[temp[y]]]++;
			update(0, snow.size() - 1, 1, s[temp[y]], 1);
		}
		else if (x == 2) {
			update(0, snow.size() - 1, -1, s[temp[y]], 1);
			sn[s[temp[y]]]--;
			temp[y] -= z;
			sn[s[temp[y]]]++;
			update(0, snow.size() - 1, 1, s[temp[y]], 1);
		}
		else if (x == 3) {
			cout << get_sum(0, snow.size() - 1, s[y], s[z], 1) << "\n";
		}
		else {
			int left = 0, right = snow.size() - 1;
			ll S = tree[1];
			int node = 1;
			while (left <= right) {
				int mid = (left + right) >> 1;

				ll sum = S - tree[node * 2];
				if (sum < y) {
					right = mid - 1;
					node = node * 2;
				}
				else {
					if (sum - sn[mid] < y) {
						cout << f_1[mid] << "\n";
						break;
					}
					left = mid + 1;
					S = sum;
					node = node * 2 + 1;
				}
			}
		}
	}

	return 0;
}
